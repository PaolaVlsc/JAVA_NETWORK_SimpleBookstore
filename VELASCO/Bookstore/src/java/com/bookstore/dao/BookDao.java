/* cs161020 - UniWa
 * Paola Velasco
 * JAVA Web Programming
 **************************************************************
 * Class Book Data Access Object
 * The class that has access and can communicate to the database
 **************************************************************
 */
package com.bookstore.dao;

import com.bookstore.beans.Book;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class BookDao {

    // CREATE - MySQL ( INSERT ) 
    public static int insert(Book book) {

        // Connect to the Db
        Connection con = ConnectionDb.getConnection();

        // Query
        String SQL_Statement = "INSERT INTO book (title, author, isbn, publisher, bookEdition, category, bookPages, price, noOfCopiesStatus)"
                + "VALUES (?,?,?,?,?,?,?,?,?)";

        // PreparedStatement object for sending SQL statements to the database
        PreparedStatement pst = null;

        int affected = 0;

        try {

            pst = con.prepareStatement(SQL_Statement);
            //System.out.println("SQL after bind: " + pst.toString());

            pst.setString(1, book.getTitle());
            pst.setString(2, book.getAuthor());
            pst.setLong(3, book.getIsbn());
            pst.setString(4, book.getPublisher());
            pst.setInt(5, book.getBookEdition());
            pst.setString(6, book.getCategory());
            pst.setInt(7, book.getBookPages());
            pst.setFloat(8, book.getPrice());
            pst.setInt(9, book.getNoOfCopies());
            //System.out.println("SQL after bind: " + pst.toString());

            affected = pst.executeUpdate();
            //System.out.println("Number of changeds: " + affected);

        } catch (SQLException ex) {
            System.out.println("SQL Statement exception: " + ex);
        } finally {
            try {
                // close resources
                con.close();
            } catch (SQLException ex) {
                System.out.println("Close resources exception: " + ex);
            }
        }
        return affected;
    }

    // READ1 - MySQL ( SELECT * FROM ) - Available books
    public static List<Book> getAllAvailableBooks() {

        // Connect to the Db
        Connection con = ConnectionDb.getConnection();

        // Query
        String SQL_Statement = "SELECT * FROM book WHERE noOfCopiesStatus > 0";

        // Store in a list objects type book retrieved through the database 
        List<Book> list = new ArrayList<>();

        try {

            // PreparedStatement object for sending SQL statements to the database
            PreparedStatement ps = con.prepareStatement(SQL_Statement);

            // A table of data representing a database result set, which is usually generated by executing a statement that queries the database.
            ResultSet rs = ps.executeQuery();            // PreparedStatement object for sending SQL statements to the database

            // Every row can create an object type book and add it to the book list
            while (rs.next()) {

                Book book = new Book();

                book.setId(rs.getInt(1));
                book.setTitle(rs.getString(2));
                book.setAuthor(rs.getString(3));
                book.setIsbn(rs.getLong(4));
                book.setPublisher(rs.getString(5));
                book.setBookEdition(rs.getInt(6));
                book.setCategory(rs.getString(7));
                book.setBookPages(rs.getInt(8));
                book.setPrice(rs.getFloat(9));
                book.setNoOfCopies(rs.getInt(10));

                list.add(book);
            }

            //close resources
            rs.close();
            ps.close();
        } catch (SQLException ex) {
            System.out.println("SQL Exception: " + ex);
        } finally {
            try {
                // close resources
                con.close();
            } catch (SQLException ex) {
                System.out.println("Close resources exception: " + ex);
            }
        }
        return list;
    }

    // READ2 - MySQL ( SELECT * FROM ) - All books.
    // The difference between this and getAllAvailableBooks is in the Query Statement
    public static List<Book> getAllBooks() {

        Connection con = ConnectionDb.getConnection();
        String SQL_Statement = "SELECT * FROM book";
        List<Book> list = new ArrayList<>();

        try {

            PreparedStatement ps = con.prepareStatement(SQL_Statement);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {

                Book book = new Book();

                book.setId(rs.getInt(1));
                book.setTitle(rs.getString(2));
                book.setAuthor(rs.getString(3));
                book.setIsbn(rs.getLong(4));
                book.setPublisher(rs.getString(5));
                book.setBookEdition(rs.getInt(6));
                book.setCategory(rs.getString(7));
                book.setBookPages(rs.getInt(8));
                book.setPrice(rs.getFloat(9));
                book.setNoOfCopies(rs.getInt(10));

                list.add(book);
            }

            //close resources
            rs.close();
            ps.close();

        } catch (SQLException ex) {
            System.out.println("SQL Exception: " + ex);
        } finally {
            try {
                con.close(); // close resources
            } catch (SQLException ex) {
                System.out.println("Close resources exception: " + ex);
            }
        }
        return list;
    }

    // READ3 - MySQL ( SELECT * FROM ) - Get book by ID
    public static Book getBookById(int id) {

        Book book = new Book();
        Connection con = ConnectionDb.getConnection();
        PreparedStatement ps = null;
        ResultSet rs = null;

        String SQL_Statement = "SELECT * FROM book WHERE id=?";

        try {

            ps = con.prepareStatement(SQL_Statement);
            ps.setInt(1, id);
            rs = ps.executeQuery();

            if (rs.next()) {
                book.setId(rs.getInt(1));
                book.setTitle(rs.getString(2));
                book.setAuthor(rs.getString(3));
                book.setIsbn(rs.getLong(4));
                book.setPublisher(rs.getString(5));
                book.setBookEdition(6);
                book.setCategory(rs.getString(7));
                book.setBookPages(rs.getInt(8));
                book.setPrice(rs.getFloat(9));
                book.setNoOfCopies(rs.getInt(10));
            }
        } catch (SQLException ex) {
            System.out.println("SQL Exception: " + ex);
        } finally {
            try {
                // close resources
                rs.close();
                ps.close();
                con.close();
            } catch (SQLException ex) {
                System.out.println("Close resources exception: " + ex);
            }
        }
        return book;
    }

    // UPDATE1 - MySQL ( UPDATE ) - A book entry
    public static int update(Book book) {

        int status = 0;

        // Connect to Db
        Connection con = ConnectionDb.getConnection();
        // PreparedStatement object for sending SQL statements to the database
        PreparedStatement pst = null;
        // Query
        String SQL_Statement = "UPDATE book SET title = ? , author =  ? , isbn = ? , publisher = ? , bookEdition = ? , category =  ?,"
                + " bookPages =  ? , price = ? , noOfCopiesStatus = ?  WHERE id = ? ";

        try {

            // connect PreparedStatement to the connection
            pst = con.prepareStatement(SQL_Statement);

            pst.setString(1, book.getTitle());
            pst.setString(2, book.getAuthor());
            pst.setLong(3, book.getIsbn());
            pst.setString(4, book.getPublisher());
            pst.setInt(5, book.getBookEdition());
            pst.setString(6, book.getCategory());
            pst.setInt(7, book.getBookPages());
            pst.setFloat(8, book.getPrice());
            pst.setInt(9, book.getNoOfCopies());
            pst.setInt(10, book.getId());

            status = pst.executeUpdate();
        } catch (SQLException ex) {
            System.out.println("SQL Exception: " + ex);
        } finally {
            try {
                // close resources
                pst.close();
                con.close();
            } catch (SQLException ex) {
                System.out.println("Close resources exception: " + ex);
            }
        }
        return status;
    }

    // UPDATE2 - MySQL ( UPDATE ) - Update no of copies of a book 
    public static int order(Book book, int quantity) {

        int status = 0;

        // Connect to Db
        Connection con = ConnectionDb.getConnection();
        // PreparedStatement object for sending SQL statements to the database
        PreparedStatement pst = null;
        // Query
        String SQL_Statement = "UPDATE book SET noOfCopiesStatus = ? - ? WHERE id = ? AND ? > ? ; ";

        try {

            // connect PreparedStatement to the connection
            pst = con.prepareStatement(SQL_Statement);

            pst.setInt(1, book.getNoOfCopies());
            pst.setInt(2, quantity);
            pst.setInt(3, book.getId());
            pst.setInt(4, book.getNoOfCopies());
            pst.setInt(5, quantity);

            status = pst.executeUpdate();

        } catch (SQLException ex) {
            System.out.println("SQL Exception: " + ex);
        } finally {
            try {
                // close resources
                pst.close();
                con.close();
            } catch (SQLException ex) {
                System.out.println("Close resources exception: " + ex);
            }
        }
        return status;
    }

    // DELETE - MySQL ( DELETE ) - Delete a book entry 
    public static int delete(int id) {

        int status = 0;
        // Connect to Db
        Connection con = ConnectionDb.getConnection();
        // PreparedStatement object for sending SQL statements to the database
        PreparedStatement ps = null;
        // Query
        String SQL_Statement = "DELETE FROM book WHERE id=?";
        
        
        try {

            ps = con.prepareStatement(SQL_Statement);
            ps.setInt(1, id);
            status = ps.executeUpdate();

        } catch (SQLException ex) {
            System.out.println("SQL Exception: " + ex);

        } finally {
            try {
                // close resources
                ps.close();
                con.close();
            } catch (SQLException ex) {
                System.out.println("Close resources exception: " + ex);
            }
        }
        return status;
    }
}
